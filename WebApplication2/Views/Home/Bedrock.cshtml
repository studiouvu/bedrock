<div id="loader">
    <img id="loader-icon" src="https://bedrock.es/favicon.png"
         style="max-width: 50px; max-height: 50px;
            animation: fade 2s infinite;
            " alt="Loading Icon">
</div>
<div id="main" class="text-left" style="display: none; width: 100%;">
<div>
    <div class="main-menu"
         style="
                 position: fixed;
                 left : 0px;
                 top: 0px;
                 z-index: 2;
                 height: 100%;
                 float: left;
                 flex-direction: column;
                  display: flex;
                  margin-left: auto; 
                  margin-right: auto;
                  padding-left: 10px;">
        <img
            class="hide-on-small"
            src="~/images/AppIconTrans.png"
            style="cursor: pointer; max-width: 22px; max-height:22px; margin-left: 4px; margin-top: 6px; margin-bottom: 16px"/>
        <div id="project" class="display-on-small" style="color:#919191; margin-top: 8px; margin-left: 2px; margin-bottom: 4px; ">
            <img class="twemoji" draggable="false" alt="⛺" src="/72x72/26fa.png">프로젝트
        </div>
        <div
            id="settings"
            class="click-color unselectable display-on-small"
            onclick="ReceiveSettings()"
            style="width: 100%; margin-bottom: 5px; height: 32px; cursor: pointer; border-radius: 10px; padding: 4px 8px;">
        </div>
        <div
            id="home-button"
            class="click-color unselectable hide-on-small"
            onclick="GetGPT()"
            style="width: 100%; margin-bottom: 5px; height: 32px; cursor: pointer; border-radius: 10px; padding: 4px 8px;">
        </div>
        <div
            id="journal-button"
            class="click-color unselectable hide-on-small"
            onclick="ReceiveDiary()"
            style="width: 100%; margin-bottom: 5px; height: 32px; cursor: pointer; border-radius: 10px; padding: 4px 8px;">
            @* 🎐🏮💼🥞 *@
        </div>
        <div style='min-height:1px; width:100%; background-color:#1f1f1f;'></div>
        <div id="project-list" class="scroll-vertical"
             style="overscroll-behavior: contain; margin-top: 20px; flex: none; overflow-y: auto; max-height: 70%; white-space: nowrap; width: 100%;">
            <div
                style="cursor: pointer; margin: 0px; background-color: #1f1f1f; border-radius: 10px; padding: 4px 8px;">
                -
            </div>
        </div>
        <div
            onclick="CreateNewProject()"
            class="click-color unselectable"
            style="float:left; cursor: pointer; width: 128px; margin-top: 10px; background-color: #1f1f1f; border-radius: 10px; padding: 4px 8px;">
            <div class="text-center">+</div>
        </div>
        <p id="user-id" class="hide-on-small" style="font-size: 12px; margin-top: auto;  color:#919191;"></p>
    </div>
</div>

<div class="display-on-small">
    <div
        style="width: 100%; min-height: 46px; position: fixed;
        flex-direction: column;
        justify-content: center;
        display: flex;
        overflow: hidden; bottom: 0px;  z-index: 3; background-color: #0f0f0f; ">
        <div style='min-height:1px; width:100%; background-color:#1f1f1f;'></div>
        <div
            style="width: 100%; min-height: 100%;  margin-top: auto; margin-bottom: auto;
            color: #919191;
            display: flex; justify-content: space-around; align-items: center;">
            <div class="unselectable"
                 onclick="ShowMenu(true)"
                 style="width: 100%; height: 100%; text-align: center;">
                <div style="font-size: 120%;">
                    <img
                        src="~/72x72/26fa.png"
                        style=" height:22px;">
                </div>
                <div style="font-size: 60%;">
                    프로젝트
                </div>
            </div>
            <div class="unselectable"
                 onclick="GoTodo()"
                 style="width: 100%; height: 100%; cursor: pointer; text-align: center;">
                <div style="font-size: 120%;">
                    <img
                        src="~/72x72/2611.png"
                        style=" height:20px;">
                </div>
                <div style="font-size: 60%;">
                    Todo
                </div>
            </div>
            <div class="unselectable"
                 onclick="GetGPT()"
                 style="width: 100%; height: 100%; cursor: pointer; text-align: center;">
                <div style="font-size: 120%;">
                    <img
                        src="~/72x72/1f31e.png"
                        style=" height:22px;">
                </div>
                <div style="font-size: 60%;">
                    비서
                </div>
            </div>
            <div class="unselectable"
                 onclick="ReceiveDiary()"
                 style="width: 100%; height: 100%; cursor: pointer; text-align: center;">
                <div style="font-size: 120%;">
                    <img
                        src="~/72x72/1f990.png"
                        style=" height:22px;">
                </div>
                <div style="font-size: 60%;">
                    일기
                </div>
            </div>
        </div>
    </div>
</div>

<div class="main-view">
    @* <div class="display-on-small"> *@
    @*     <div *@
    @*         style="width: 100%; min-height: 50px; position: fixed; *@
    @*             flex-direction: column; *@
    @*             justify-content: center; *@
    @*             display: flex; *@
    @*             overflow: hidden; bottom: 0px; *@
    @*             background-color: #0f0f0f; *@
    @*               z-index: 3;"> *@
    @*         <div style='min-height:1px; width:100%; background-color:#1f1f1f;'></div> *@
    @*         <div *@
    @*             style="width: 100%; min-height: 100%;  margin-top: auto; margin-bottom: auto; *@
    @*             color: #919191; *@
    @*             display: flex; justify-content: space-around; align-items: center;"> *@
    @*             <div class="click-color unselectable" style="background-color: #1b1c1c; *@
    @*                     width: 100%; min-height: 100%; border-radius: 10px;"> *@
    @*                 <div class="text-center"> *@
    @*                     🎏 목록 *@
    @*                 </div> *@
    @*             </div> *@
    @*         </div> *@
    @*     </div> *@
    @* </div> *@

    <div style="display: flex; overflow: hidden; height: 100%; max-width: 100%; ">
        <div class="hide-on-small display-on-medium" style="margin-left: 230px;"></div>
        <div
            style="padding-top: 5px; width: 100%; margin-bottom: 200px; min-height: 600px; margin-left: 12px; margin-right: 12px;">
            <div
                style="width: 100%; margin-left: auto; margin-right: auto; max-width: 600px; border-radius: 10px;">
                <div
                    style="width: 100%; position: fixed; overflow: hidden; top: 0px; z-index: 1; background-color: #0f0f0f; ">
                    <div id="project-name-header"
                         style="color:#919191; margin-top: 8px; margin-bottom: 8px;">
                    </div>
                    <div
                        style="color:#919191; width: 100%; max-width: 600px; overflow: hidden; border: none; outline: none; padding-bottom: 5px; display: flex;">
                        @* <div class="hide-on-small" *@
                        @*      style="width: 28px; height: 100%; padding: 6px; border-radius: 10px; margin-right: 6px;"> *@
                        @*     <div class="text-center"> *@
                        @*         🎏 *@
                        @*     </div> *@
                        @* </div> *@
                        <div
                            id="last-projects"
                            class="scroll-hoizontal"
                            style="height: 100%; padding-right: 15px; border: none; outline: none; display: flex; overflow: scroll;  white-space: nowrap;">
                            <div
                                style="cursor: pointer; height: 100%; background-color: #1f1f1f; padding: 6px 9px; border-radius: 10px; margin-right: 6px;">
                                <div class="text-center">
                                    --
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div style="width: 100%; height: 100%; margin-top: 70px;">
                    <div id="project-name-holder" style="display: flex; border: none; outline: none;">
                        <div style="display: flex; align-items: center; width: 100%; height: 100%">
                            <div
                                id="project-name"
                                class="title-input input-box"
                                contenteditable="true"
                                placeholder="-"
                                aria-label="프로젝트 이름 입력"
                                onblur="InputProjectName()"
                                onkeyup="InputProjectName()">
                            </div>
                        </div>
                    </div>
                    <div style="border: none; outline: none; padding-bottom: 4px; display: flex;">
                        <div
                            onclick="ShowDoneTask()"
                            class="click-color unselectable input-hide"
                            style="cursor: pointer; height: 100%; border-radius: 10px; padding: 4px;">
                            <div
                                id="task-count-hold"
                                class="text-center">
                                <font color="#919191" style="display: flex;">
                                    ✔️
                                    <div id="task-count">
                                        -/-
                                    </div>
                                </font>
                            </div>
                        </div>
                    </div>
                    <div
                        style="max-width: 100%; margin-left: auto; margin-right: auto; border-radius: 10px;">
                        <div id="tblContent" style="max-width: 100%;  overflow-wrap: break-word;">
                        </div>
                        <div style="min-height: 4px;">
                        </div>
                        <div class="input-hide">
                            <div style="max-width: 100%; min-height: 42px; display: flex; align-items: center;">
                                <div id="input-tab" style="height: 100%;"></div>
                                <div
                                    class="click-animate unselectable"
                                    style="cursor: pointer; min-width: 18px; min-height: 18px; border: solid #cdd0d4;  border-width:1px; margin-right: 4px; border-radius: 5px;">
                                </div>
                                <div class="input-box-holder"
                                     style="display: flex; align-items: center; width: 100%; background: #1b1c1c; overflow-wrap: break-word;">
                                    <div style="width: 100%; height: 100%; margin-left: 5px; margin-right: 5px;">
                                        <input class="input-box" id="input1" type="text" placeholder="> ..."
                                               onKeyDown="SendInput(event)"/>
                                    </div>
                                </div>
                                <div
                                    class="click-color unselectable input-box-holder"
                                    onclick="SendInputForce()"
                                    style="cursor: pointer; min-width: 42px; min-height: 42px; display: flex; align-items: center; background: #1b1c1c;
                             padding: 5px; margin-left: 5px; ">
                                    <div class="text-center" style="width: 100%; align-items: center;">
                                        →
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (ViewBag.Login == false)
                {
                    <span id="login-holder">
                        <div
                            style="max-width: 400px; margin-top: 80px; margin-left: auto; margin-right: auto; background-color: #044a80; padding: 15px;border-radius: 10px;">
                            <div class="text-center" style="width: 100%; align-items: center;">
                                <div id="login-form">
                                    <h7>
                                        로그인하여 데이터를 안전하게 보관하세요
                                    </h7>
                                    <div style="max-width: 100%; margin-top: 10px; display: flex; align-items: center;">
                                        <div class="input-box-holder"
                                             style="width: 100%; background: #092c47; overflow-wrap: break-word;">
                                            <div
                                                style="width: 100%; height: 100%; margin-left: 10px; margin-right: 10px;">
                                                <input id="mail-input" class="input-box" type="text"
                                                       placeholder="your-email@@email.com"
                                                       onKeyDown="SendEmail(event)"/>
                                            </div>
                                        </div>
                                        <div
                                            class="click-color unselectable input-box-holder"
                                            onclick="SendEmailForce()"
                                            style="background: #092c47; cursor: pointer; min-width: 42px; min-height: 42px; display: flex; align-items: center;
                                    padding: 5px; margin-left: 5px; ">
                                            <div class="text-center" style="width: 100%; align-items: center;">
                                                →
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </span>
                }
            </div>
            <div
                class="click-color unselectable input-hide"
                onclick="CurrentProjectArchive()"
                style="cursor: pointer; background-color: #1f1f1f; max-width: 140px; margin-top: 700px; margin-left: auto; margin-right: auto; padding: 5px; border-radius: 10px;">
                <div class="text-center" style="width: 100%; align-items: center;">
                    <font color="#919191">
                        Project archive
                    </font>
                </div>
            </div>
        </div>
        @* <div class="display-on-small" style="min-width: 12px;"></div> *@
    </div>
</div>
</div>

@section Scripts
{
    <script src="~/dist/twemoji.js"></script>

    <script type="text/javascript">
    var deviceId = "@ViewBag.DeviceId";
    var emailId = "";
    var depth = 0;
    var isShift = false;
    var init = false;
    var isMobile = false;

    $(function () {
        const width = window.innerWidth;
        isMobile = width <= 900;
        if (isMobile)
            ShowMenu(false);
        SetMobile(isMobile);

        document.getElementById("input1").addEventListener("keyup", function (event) {
            if (event.key === "Shift") {
                isShift = false;
            }
        });

        document.getElementById("input1").addEventListener("keydown", function (event) {
            if (event.key === "Shift") {
                event.preventDefault();
                isShift = true;
            }

            if (event.key === "Tab") {
                event.preventDefault();

                if (isShift) {
                    depth -= 1;

                    if (depth < 0)
                        depth = 0;

                    var s = "";
                    for (var i = 0; i < depth; i++) {
                        s += "&nbsp;&nbsp;&nbsp;&nbsp;";
                    }

                    $('#input-tab').html(s);
                } else {
                    depth += 1;
                    $('#input-tab').append("&nbsp;&nbsp;&nbsp;&nbsp;");
                }
            }
        });

        ReceiveFullContent();
        ReceiveUserId();
        GetTaskCount();

        $('#home-button').html(ToTwemoji("🌞비서"));
        $('#journal-button').html(ToTwemoji("🦐일기"));
        $('#settings').html(ToTwemoji("⚙️설정"));

        /*const myDivs = document.querySelectorAll('.click-animate');

        myDivs.forEach((div) => {
            div.addEventListener('click', () => {
                div.classList.toggle('animate');
            });
        });*/
    });

    function ShowTaskInput(show) {
        const elements = document.querySelectorAll('.input-hide');
        elements.forEach(element => {
            element.style.display = show ? 'block' : 'none';
        });
    }

    function GoTodo() {
        fetch('@Url.Action("ReceiveGoToTask")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                deviceId: deviceId
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                if (data == 'true')
                    ReceiveFullContent();
                ShowMenu(false);
            })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function ShowMenu(show) {
        const width = window.innerWidth;
        const isMobile = width <= 900;

        if (!isMobile)
            return;
        {
            const elements = document.querySelectorAll('.main-menu');
            elements.forEach(element => {
                element.style.display = show ? 'block' : 'none';
            });
        }
        {
            const elements = document.querySelectorAll('.main-view');
            elements.forEach(element => {
                element.style.display = show ? 'none' : 'block';
            });
        }
    }

    function SetMobile(isMobile) {
        const elements = document.querySelectorAll('.main-menu');
        elements.forEach(element => {
            element.style.backgroundColor = isMobile ? '#0f0f0f' : 'transparent';
            element.style.width = isMobile ? '100%' : '230px';
        });
    }

    function ReceiveFullContent() {
        ReceiveContent();
        GetTaskCount();
        ReceiveProjectName();
        GetLastProjects();
        GetProjectList();
    }

    function ReceiveContent() {
        fetch('@Url.Action("ReceiveFullContent")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body:
                JSON.stringify({
                    DeviceId: deviceId,
                })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('fail to load user id');
                }
                return response.json();
            })
            .then(data => {
                $('#tblContent').html(ToTwemoji(data.content));

                if (data.projectType == "Task") {
                    ShowTaskInput(true);
                } else {
                    ShowTaskInput(false);
                }

                if (init == false) {
                    const loader = document.getElementById('loader');
                    loader.classList.add('hidden');

                    document.getElementById('main').style.display = 'block';

                    init = true;
                }
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function ReceiveUserId() {
        fetch('@Url.Action("ReceiveUserId")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body:
                JSON.stringify({
                    DeviceId: deviceId,
                })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('fail to load user id');
                }
                return response.text();
            })
            .then(data => {
                $('#user-id').html(data);
            })
            .catch(error => {
                $('#user-id').html("fail to load user id");
            });
    }

    function ReceiveProjectName() {
        fetch('@Url.Action("ReceiveCurrentProjectName")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body:
                JSON.stringify({
                    DeviceId: deviceId,
                })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('fail to load user id');
                }
                return response.text();
            })
            .then(data => {
                const revisedData = ToTwemoji(data);
                $('#project-name').html(revisedData);
                $('#project-name-header').html(revisedData);
                document.title = data + " - Bedrock";
            })
            .catch(error => {
                $('#project-name').html("fail");
            });
    }

    function ToTwemoji(data) {
        return twemoji.parse(data, {
            className: 'twemoji',
        });
        /*if (isMobile)
            return twemoji.parse(data , {
                className: 'twemoji',
            });
        else
            return twemoji.parse(data , {
                folder: 'svg',
                ext: '.svg',
                className: 'twemoji',
            });*/
    }

    function ClickDone(id, destroy) {
        const element = document.getElementById(id);
        element.classList.add('fade-out'); // 투명해지도록 클래스 추가

        if (destroy == 'true') {
            setTimeout(() => {
                element.remove();
            }, 500); // 1000ms = 1초
        }

        fetch('@Url.Action("ClickDone")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({data: id})
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                GetTaskCount();
                if (destroy == 'false') {
                    setTimeout(() => {
                        ReceiveFullContent();
                    }, 500); // 1000ms = 1초
                }
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function ClickRecover(id) {
        fetch('@Url.Action("ClickDone")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({data: id})
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                ReceiveFullContent();
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function SendInputForce() {
        let typped = document.getElementById('input1').value;
        document.getElementById('input1').value = '';

        if (typped == "") {
            depth = 0;
            $('#input-tab').html("");
            return;
        }

        fetch('@Url.Action("ReceiveText")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                depth: depth,
                deviceId: deviceId,
                data: typped
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                $('#tblContent').append(ToTwemoji(data));
                GetTaskCount();
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function SendInput(event) {
        var key = event.key || event.keyCode;

        if (key != 'Enter')
            return;

        SendInputForce();
    }

    function SendEmail(event) {
        var key = event.key || event.keyCode;

        if (key != 'Enter')
            return;

        SendEmailForce();
    }

    function SendEmailForce() {
        let typped = document.getElementById('mail-input').value;
        $('#login-form').html("<h5>Sending...</h5>");

        fetch('@Url.Action("ReceiveEmailId")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({data: typped})
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                emailId = typped;
                $('#login-form').html(data);
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function SendCode(event) {
        var key = event.key || event.keyCode;

        if (key != 'Enter')
            return;

        SendCodeForce();
    }

    function SendCodeForce() {
        let typped = document.getElementById('code-input').value;
        $('#login-form').html("<h5>Sending...</h5>");

        fetch('@Url.Action("ReceiveEmailCode")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                deviceId: deviceId,
                content: emailId,
                data: typped
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                ReceiveFullContent();
                ReceiveUserId();
                scrollToTop();
                $('#login-holder').html("");
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function InputProjectName() {
        let typped = document.getElementById('project-name').innerHTML;
        const replacedImgStr = typped.replace(/<img[^>]*alt="([^"]*)"[^>]*>/g, '$1');
        const finalStr = replacedImgStr.replace(/<[^>]+>/g, '');

        const revisedData = ToTwemoji(finalStr);
        $('#project-name-header').html(revisedData);

        SendProjectName(finalStr);
    }

    function SendProjectName(name) {
        console.log(name);
        fetch('@Url.Action("ReceiveSendProjectName")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                deviceId: deviceId,
                data: name
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                GetProjectList();
                GetLastProjects();
            })
            .catch(error => {
            });
    }

    function ShowDate() {
        fetch('@Url.Action("ReceiveShowDate")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({deviceId: deviceId})
        })
            .then(data => {
                ReceiveFullContent();
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function ShowDoneTask() {
        fetch('@Url.Action("ReceiveShowDoneTask")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({deviceId: deviceId})
        })
            .then(data => {
                ReceiveFullContent();
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function GetTaskCount() {
        fetch('@Url.Action("ReceiveTaskCount")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body:
                JSON.stringify({
                    DeviceId: deviceId,
                })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            }).then(data => {
            $('#task-count').html(data);
        })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function GetLastProjects() {
        fetch('@Url.Action("ReceiveLastProjectList")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body:
                JSON.stringify({
                    DeviceId: deviceId,
                })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.json();
            }).then(data => {

            var result = "";

            data.content.forEach(element => {
                var e = data.html
                    .replace('projectNameRaw', element.name)
                    .replace('projectName', ToTwemoji(element.name))
                    .replace('projectId', element.id);

                result += e;
            });

            $('#last-projects').html(result);
        })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function GetProjectList() {
        fetch('@Url.Action("ReceiveProjectList")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body:
                JSON.stringify({
                    DeviceId: deviceId,
                })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.json();
            }).then(data => {

            var result = "";

            data.content.forEach(element => {
                const name = ToTwemoji(element.name);

                var e = data.html
                    .replace('projectNameRaw', element.name)
                    .replace('projectName', name)
                    .replace('projectId', element.id)
                    .replace('backgroundColor', element.backgroundColor);

                result += e;
            });

            $('#project-list').html(result);
        })
            .catch(error => {
                $('#project-list').html("fail");
            });
    }

    function CreateNewProject() {
        fetch('@Url.Action("ReceiveCreateProject")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({deviceId: deviceId})
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                scrollToTop();
                ReceiveFullContent();
                ShowMenu(false);
            })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function ChangeProject(projectId, projectName) {
        ShowMenu(false);

        $('#tblContent').html("<div class='fade-in' style='opacity: 0; min-height: 100px; border-radius: 15px; background-color: #1b1c1c'></div>");
        $('#project-name').html(ToTwemoji(projectName));
        $('#input-tab').html("");
        depth = 0;
        scrollToTop();

        fetch('@Url.Action("ReceiveChangeProject")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                deviceId: deviceId,
                data: projectId
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                ReceiveFullContent();
            })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function CurrentProjectArchive(projectId) {
        scrollToTop();

        fetch('@Url.Action("ReceiveCurrentProjectArchive")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                deviceId: deviceId,
                data: projectId
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                ReceiveFullContent();
            })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function GetGPT() {
        scrollToTop();
        ShowMenu(false);

        ShowTaskInput(false);

        $('#tblContent').html("<div class='fade-in-long' style='opacity: 0; min-height: 300px; border-radius: 15px; background-color: #1b1c1c'></div>");
        $('#project-name').html(ToTwemoji("🌞비서"));
        $('#project-name-header').html(ToTwemoji("🌞비서"));

        depth = 0;
        document.title = "🌞비서 - Bedrock";

        $('#input-tab').html("");

        fetch('@Url.Action("ReceiveGptContent")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                deviceId: deviceId
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                $('#tblContent').html(ToTwemoji(data));
                GetLastProjects();
                GetProjectList();
            })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function ReceiveDiary() {
        scrollToTop();
        ShowTaskInput(false);
        ShowMenu(false);

        $('#tblContent').html("<div class='fade-in-long' style='opacity: 0; min-height: 300px; border-radius: 15px; background-color: #1b1c1c'></div>");
        $('#project-name').html(ToTwemoji("🦐일기"));
        $('#project-name-header').html(ToTwemoji("🦐일기"));
        depth = 0;
        document.title = "🦐일기 - Bedrock";

        $('#input-tab').html("");

        fetch('@Url.Action("ReceiveDiaryContent")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                deviceId: deviceId
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                $('#tblContent').html(data);
                twemoji.parse(document.getElementById('tblContent'), {
                    className: 'twemoji',
                });

                GetLastProjects();
                GetProjectList();
            })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function ReceiveSettings() {
        scrollToTop();
        ShowTaskInput(false);
        ShowMenu(false);

        $('#tblContent').html("<div class='fade-in-long' style='opacity: 0; min-height: 300px; border-radius: 15px; background-color: #1b1c1c'></div>");
        $('#project-name').html(ToTwemoji("⚙️설정"));
        $('#project-name-header').html(ToTwemoji("⚙️설정"));
        depth = 0;
        document.title = "⚙️설정 - Bedrock";

        $('#input-tab').html("");

        fetch('@Url.Action("ReceiveSettings")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                deviceId: deviceId
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                $('#tblContent').html(data);
                twemoji.parse(document.getElementById('tblContent'), {
                    className: 'twemoji',
                });
                GetLastProjects();
                GetProjectList();
            })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function ReceiveDeleteAccount() {
        scrollToTop();

        fetch('@Url.Action("ReceiveDeleteAccount")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                deviceId: deviceId
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                PageReload();
            })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }
    
    function PageReload() {
        location.reload(true);
    }

    function scrollToTop() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth' // 부드럽게 스크롤 이동
        });
    }

    function ReceiveCreateNewDiary() {
        fetch('@Url.Action("ReceiveCreateNewDiary")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body:
                JSON.stringify({
                    DeviceId: deviceId,
                })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('fail to load user id');
                }
                return response.text();
            })
            .then(data => {
                ReceiveFullContent();
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function InputDiaryContent() {
        let typped = document.getElementById('diary-content').innerHTML;
        const replacedImgStr = typped.replace(/<img[^>]*alt="([^"]*)"[^>]*>/g, '$1');
        const finalStr = replacedImgStr.replace(/<[^>]+>/g, '');

        SendDiaryContent(replacedImgStr);
    }

    function SendDiaryContent(name) {
        console.log(name);
        fetch('@Url.Action("ReceiveSendDiaryContent")', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                deviceId: deviceId,
                data: name
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                GetProjectList();
                GetLastProjects();
            })
            .catch(error => {
            });
    }
</script>

    <script type="module">
    // Import the functions you need from the SDKs you need
    import {initializeApp} from "https://www.gstatic.com/firebasejs/11.0.2/firebase-app.js";
    import {getAnalytics} from "https://www.gstatic.com/firebasejs/11.0.2/firebase-analytics.js";
    // TODO: Add SDKs for Firebase products that you want to use
    // https://firebase.google.com/docs/web/setup#available-libraries

    // Your web app's Firebase configuration
    // For Firebase JS SDK v7.20.0 and later, measurementId is optional
    const firebaseConfig = {
        apiKey: "AIzaSyAT0D5Zz-xlcsbdgMSwKpQHlqva2luW5oc",
        authDomain: "bedrock-2ff5c.firebaseapp.com",
        projectId: "bedrock-2ff5c",
        storageBucket: "bedrock-2ff5c.firebasestorage.app",
        messagingSenderId: "328345819081",
        appId: "1:328345819081:web:f1ef6ad97df84017a87a18",
        measurementId: "G-T2NN7FCG1Z"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const analytics = getAnalytics(app);
</script>
}