@using Bedrock.Views
@{
    ViewData["Title"] = "Bedrock";
}
<div class="text-left" style="width: 100%;">
    <div class="hide-on-small">
        <div id="floating"
             style="
         position: fixed;
         left : 10px;
         top: 0px;
         width: 250px;
         height: 100%;
          margin-left: auto; margin-right: auto; ">
            <div style="margin-bottom: 50px; margin-top: 20px;">
                <img
                    onclick="PageReload()"
                    class="click-animate unselectable"
                    src="~/images/bedrock-icon.png"
                    style="cursor: pointer; height:26px;">
            </div>
            <div id="project-list" class="scroll-vertical" style="overflow-y: auto; max-height: 700px; white-space: nowrap; width: 100%;">
                <div
                    style="cursor: pointer; margin: 0px; background-color: #1f1f1f; border-radius: 10px; padding: 4px 8px;">
                    -
                </div>
            </div>
            <div
                onclick="CreateNewProject()"
                class="click-color unselectable"
                style="float:left; cursor: pointer; width: 128px; margin-left: auto; margin-right: auto; margin-top: 10px; background-color: #1f1f1f; border-radius: 10px; padding: 4px 8px;">
                <div class="text-center">+</div>
            </div>
        </div>
    </div>
    <div
        class="click-color unselectable"
        onclick="ShowDate()"
        style="position: fixed; cursor: pointer; padding: 5px; background-color: #1f1f1f; border-radius: 10px; right: 10px; bottom: 10px;">
        <div class="text-center">
            <font color="#919191">
                🗓️
            </font>
        </div>
    </div>
    <div class="container" style="padding-top: 5px; margin-bottom: 200px; min-height: 600px; ">
        <div
            style="width: 100%; max-width: 600px; margin-left: auto; margin-right: auto; border-radius: 10px;">
            <font color="#919191">
                <div style="border: none; outline: none; padding-bottom: 10px; display: flex; margin-bottom: 15px">
                    <div class="hide-on-small"
                         style="width: 28px; height: 100%; padding: 6px; border-radius: 10px; margin-right: 6px;">
                        <div class="text-center">
                            🎏
                        </div>
                    </div>
                    <div class="display-on-small click-color unselectable"
                         onclick="CreateNewProject()"
                         style="cursor: pointer; background-color: #1f1f1f; min-width: 34px; height: 100%; padding: 6px; border-radius: 10px; margin-right: 6px;">
                        <div class="text-center">
                            <b>+</b>
                        </div>
                    </div>
                    <div
                        id="last-projects"
                        class="scroll-hoizontal"
                        style="height: 100%; border: none; outline: none; display: flex; overflow: scroll;  white-space: nowrap;">
                        <div
                            style="cursor: pointer; height: 100%; background-color: #1f1f1f; padding: 6px 9px; border-radius: 10px; margin-right: 6px;">
                            <div class="text-center">
                                --
                            </div>
                        </div>
                    </div>
                </div>
            </font>

            <div style="width: 100%; height: 100%;">
                <div style="border: none; outline: none;">
                    <h1>
                        <b id="project-name">
                            New Project
                        </b>
                    </h1>
                </div>
                <div style="border: none; outline: none; padding-bottom: 10px; display: flex;">
                    <div
                        class="click-color unselectable"
                        style="cursor: pointer; height: 100%; border-radius: 10px;">
                        <div
                            class="text-center">
                            <font color="#919191" style="display: flex;">
                                ✔️
                                <div id="task-count">
                                    --/--
                                </div>
                            </font>
                        </div>
                    </div>
                </div>
                <div
                    style="max-width: 100%; margin-left: auto; margin-right: auto; border-radius: 10px;">
                    <div id="tblContent" style="max-width: 100%;  overflow-wrap: break-word;">
                    </div>
                    <div style="min-height: 5px;">
                    </div>
                    <div style="max-width: 100%; min-height: 42px; display: flex; align-items: center;">
                        <div
                            class="click-animate unselectable"
                            style="cursor: pointer; width: 18px; height: 18px; border: solid #cdd0d4;  border-width:1px; margin-right: 4px; border-radius: 5px;">
                        </div>
                        <div class="input-box-holder" style="display: flex; align-items: center; width: 100%; background: #1b1c1c; overflow-wrap: break-word;">
                            <div style="width: 100%; height: 100%; margin-left: 5px; margin-right: 5px;">
                                <input class="input-box" id="input1" type="text" placeholder="> ..." onKeyDown="SendInput(event)"/>
                            </div>
                        </div>
                        <div
                            class="click-color unselectable input-box-holder"
                            onclick="SendInputForce()"
                            style="cursor: pointer; min-width: 42px; min-height: 42px; display: flex; align-items: center; background: #1b1c1c;
                             padding: 5px; margin-left: 5px; ">
                            <div class="text-center" style="width: 100%; align-items: center;">
                                →
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (ViewBag.Login == false)
            {
                <div style="max-width: 400px; margin-top: 80px; margin-left: auto; margin-right: auto; background-color: #044a80; padding: 15px;border-radius: 10px;">
                    <div class="text-center" style="width: 100%; align-items: center;">
                        <div id="login-form">
                            <h7>
                                로그인하여 데이터를 안전하게 보관하세요
                            </h7>
                            <div style="max-width: 100%; margin-top: 10px; display: flex; align-items: center;">
                                <div class="input-box-holder" style="width: 100%; background: #092c47; overflow-wrap: break-word;">
                                    <div style="width: 100%; height: 100%; margin-left: 10px; margin-right: 10px;">
                                        <input id="mail-input" class="input-box" type="text" placeholder="your-email@@email.com" onKeyDown="SendEmail(event)"/>
                                    </div>
                                </div>
                                <div
                                    class="click-color unselectable input-box-holder"
                                    onclick="SendEmailForce()"
                                    style="background: #092c47; cursor: pointer; min-width: 42px; min-height: 42px; display: flex; align-items: center;
                                    padding: 5px; margin-left: 5px; ">
                                    <div class="text-center" style="width: 100%; align-items: center;">
                                        →
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="text-center" style="width: 100%; margin-top: 100px;">
        <font color="#454545">
            <div id="user-id" style="width: 100%;">
                user id loading
            </div>
            <div style="width: 100%; margin-top: 8px;">
                <b>Bedrock</b>
            </div>
        </font>
    </div>

    <div
        class="click-color unselectable"
        onclick="CurrentProjectArchive()"
        style="cursor: pointer; background-color: #1f1f1f; max-width: 140px; margin-top: 50px; margin-left: auto; margin-right: auto; padding: 5px; border-radius: 10px;">
        <div class="text-center" style="width: 100%; align-items: center;">
            <font color="#919191">
                프로젝트 아카이브
            </font>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
    $(function () {
        document.addEventListener('keydown', function (event) {
            var key = event.key || event.keyCode;

            if (key == 'Enter') {
            }
            return false;
        });

        ReceiveFullContent();
        ReceiveUserId();
        GetTaskCount();
        
        /*const myDivs = document.querySelectorAll('.click-animate');

        myDivs.forEach((div) => {
            div.addEventListener('click', () => {
                div.classList.toggle('animate');
            });
        });*/
    });

    function ReceiveFullContent() {
        ReceiveProjectName();
        GetProjectList();
        GetLastProjects();
        
        fetch('@Url.Action("ReceiveFullContent")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('fail to load user id');
            }
            return response.text();
        })
        .then(data => {
            $('#tblContent').html(data);
        })
        .catch(error => {
            $('#tblContent').html("fail");
        });

        GetTaskCount();
    }

    function ReceiveUserId() {
        fetch('@Url.Action("ReceiveUserId")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('fail to load user id');
            }
            return response.text();
        })
        .then(data => {
            $('#user-id').html(data);
        })
        .catch(error => {
            $('#user-id').html("fail to load user id");
        });
    }

    function ReceiveProjectName() {
        fetch('@Url.Action("ReceiveCurrentProjectName")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('fail to load user id');
                }
                return response.text();
            })
            .then(data => {
                $('#project-name').html(data);
            })
            .catch(error => {
                $('#project-name').html("fail");
            });
    }

    function ClickDone(id) {
        console.log("ClickDone");

        fetch('@Url.Action("ClickDone")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({ data: id })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('네트워크 응답에 문제가 있습니다.');
            }
            return response.text();
        })
        .then(data => {
            $('#tblContent').html(data);
            GetTaskCount();
        })
        .catch(error => {
            $('#tblContent').html("fail");
        });
    }

    function SendInputForce() {
        let typped = document.getElementById('input1').value;
        document.getElementById('input1').value = '';

        fetch('@Url.Action("ReceiveText")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({ data: typped })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                $('#tblContent').append(data);
                GetTaskCount();
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function SendInput(event) {
        var key = event.key || event.keyCode;

        if(key != 'Enter')
            return;

        SendInputForce();
    }

    function SendEmail(event) {
        var key = event.key || event.keyCode;

        if(key != 'Enter')
            return;

        SendEmailForce();
    }

    function SendEmailForce() {
        let typped = document.getElementById('mail-input').value;
        $('#login-form').html("<h5>Sending...</h5>");

        fetch('@Url.Action("ReceiveEmailId")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({ data: typped })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                $('#login-form').html(data);
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function SendCode(event) {
        var key = event.key || event.keyCode;

        if(key != 'Enter')
            return;

        SendCodeForce();
    }

    function SendCodeForce() {
        let typped = document.getElementById('code-input').value;
        $('#login-form').html("<h5>Sending...</h5>");

        fetch('@Url.Action("ReceiveEmailCode")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({ data: typped })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                location.reload(true);
            })
            .catch(error => {
                $('#tblContent').html("fail");
            });
    }

    function ShowDate() {
        fetch('@Url.Action("ReceiveShowDate")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        })
        .then(data => {
            ReceiveFullContent();
        })
        .catch(error => {
            $('#tblContent').html("fail");
        });
    }

    function GetTaskCount() {
        fetch('@Url.Action("ReceiveTaskCount")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('네트워크 응답에 문제가 있습니다.');
            }
            return response.text();
        }).then(data => {
                $('#task-count').html(data);
            })
            .catch(error => {
                $('#tblContent').html("fail");
        });
    }

    function GetLastProjects() {
        fetch('@Url.Action("ReceiveLastProjectList")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            }).then(data => {
            $('#last-projects').html(data);
        })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function GetProjectList() {
        fetch('@Url.Action("ReceiveProjectList")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            }).then(data => {
            $('#project-list').html(data);
        })
            .catch(error => {
                $('#project-list').html("fail");
            });
    }

    function CreateNewProject() {
        fetch('@Url.Action("ReceiveCreateProject")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('네트워크 응답에 문제가 있습니다.');
            }
            return response.text();
        })
        .then(data => {
            ReceiveFullContent();
        })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function ChangeProject(projectId) {
        fetch('@Url.Action("ReceiveChangeProject")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({ data: projectId })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                ReceiveFullContent();
            })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function CurrentProjectArchive(projectId) {
        fetch('@Url.Action("ReceiveCurrentProjectArchive")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({ data: projectId })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('네트워크 응답에 문제가 있습니다.');
                }
                return response.text();
            })
            .then(data => {
                ReceiveFullContent();
            })
            .catch(error => {
                $('#last-projects').html("fail");
            });
    }

    function PageReload() {
        location.reload(true);
    }
    
</script>
}